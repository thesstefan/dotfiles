#global !p
#def vim.eval('vimtex#syntax#in_mathzone()'):
#	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
#def comment(): 
#	return vim.eval('vimtex#syntax#in_comment()') == '1'
#def env(name):
#	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
#	return x != '0' and y != '0'
#endglobal

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet binn "Binomial" iA 
\binom{$1}{$2}$0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet mbf "Math Bold" iA 
\mathbf{$1}$0
endsnippet

priority 1000
context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet Int "Infinite integral" iA
\int_{-\infty}^{\infty} $0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet int "Integral" iA
\int_{$1}^{$2} $0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet isum "Infinite Sum" iA
\sum_{$1}^{\infty} $0
endsnippet

context "vim.eval('vimtex#syntax#in_mathzone()')"
snippet sum "Sum" iA
\sum_{$1}^{$2} $0
endsnippet
