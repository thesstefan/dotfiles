snippet _tem "Generic ASM template" b
global main

extern exit

SECTION .data
    in_format db '%s', 0
    out_format db '%s', 10, 0

    file_name db 'file.txt', 0
    open_mode db 'w+', 0
    file_descriptor dd 0

SECTION .text
main:
    push        dword 0
    call        exit
endsnippet

snippet _module "module" b
global `!p snip.rv = snip.basename`

SECTION .text
`!p snip.rv = snip.basename`:
    $0
endsnippet

snippet _scanf "scanf" b
push	dword $1
push	dword in_format
call	scanf
add	ESP, 4 * 2
endsnippet

snippet _fscanf "fscanf" b
push	dword $1
push	dword in_format 
push	dword [file_descriptor] 
call	fscanf	
add	ESP, 4 * 3
endsnippet

snippet _printf "printf" b
push	dword $1
push	dword out_format 
call	printf	
add	ESP, 4 * 2
endsnippet

snippet _fprintf "fprintf" b
push	dword $1
push	dword out_format 
push	dword [file_descriptor] 
call	fprintf	
add	ESP, 4 * 3
endsnippet

snippet _fopen "fopen" b
push	dword open_mode
push	dword file_name 
call	fopen
add	ESP, 4 * 2

cmp	EAX, 0
je	end
mov	dword [file_descriptor], EAX
endsnippet

snippet _fclose "fclose" b
push	dword [file_descriptor]
call	fclose
add	ESP, 4 * 1
endsnippet

snippet _strlen "strlen" b
push	dword $1
call	strlen
add	ESP, 4 * 1
endsnippet
